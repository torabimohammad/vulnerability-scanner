import argparse
import subprocess
import nvdlib
import json
import os
from pycvesearch import CVESearch

# Get the running containers
def list_running_containers():
    try:
        # Execute the 'docker ps' command and capture its output
        result = subprocess.run(["docker", "ps"], capture_output=True, text=True, check=True)
        output = result.stdout
        # Print the output of the 'docker ps' command
        print(output)
    except subprocess.CalledProcessError as e:
        print(f"An error occurred: {e}")

# Implementation of WpScan
def run_wpscan(url='http://localhost:8080'):
    command = [
        'wpscan',
        '--url', url,
        '--output', 'wpscan_result.txt',
        '--enumerate', 'vp,vt,vt,tt',
        '--api-token', 'N6tfaygaoRj8vHwT3uGfIPmkUHu2wUrwXQpW1MaERvI'
    ]
    result = subprocess.run(command, capture_output=True, text=True)
    print(result.stdout)

# Get the apache service version
def get_apache_version(container=None):
    if container:
        docker_command = [
            'docker', 'exec', '-it', container, 'httpd', '-v'
        ]
    docker_result = subprocess.run(docker_command, capture_output=True, text=True)
    print(docker_result.stdout)

# Get the MySQL service version
def get_mysql_version(container=None):
    if container:
        docker_command = [
            'docker', 'exec', '-it', container, 'mysql', '--version'
        ]
    docker_result = subprocess.run(docker_command, capture_output=True, text=True)
    print(docker_result.stdout)

# Get the wordpress service version
def get_wp_version(container=None):
    if container:
        docker_command = [
            'docker', 'exec', container, 'cat', '/var/www/html/wp-includes/version.php', '|', 'grep', 'wp_version'
        ]
        docker_result = subprocess.run(docker_command, capture_output=True, text=True)
        print(docker_result.stdout)

# Get the phpMyAdmin service version
def get_phpmyadmin_version(container=None):
    if container:
        docker_command = [
            'docker', 'exec', container, 'printenv', 'VERSION'
        ]
        docker_result = subprocess.run(docker_command, capture_output=True, text=True)
        print(docker_result.stdout)

#Implementation of Dirsearch - A tools for searching site files 
def run_dirsearch(url='http://localhost:8080'):
    # Assuming dirsearch is in the 'dirsearch' directory relative to this script
    dirsearch_command = [
        'python3', 'dirsearch/dirsearch.py',
        '-u', url
    ]
    subprocess.run(dirsearch_command)

#Implementation of getting the vulnerabilities of each services
def get_vulnerabilities():
    service_name = input("Enter the service name: ").lower()
    try:
        service_version = float(input("Enter the version of the service: "))
    except ValueError:
        print("Invalid version number!")

    if service_name == "apache":
        service = f"{service_name}:http_server:{str(service_version)}"
    else:
        service = f"{service_name}:{service_name}:{str(service_version)}"

    r = nvdlib.searchCPE(keywordSearch = service_name, key="472d249e-e487-4e57-873c-17492fd5bce3")

    cve_results = []  # List to store CVE results

    for i in r:
        if service in i.cpeName :
            results = nvdlib.searchCVE(cpeName=i.cpeName, key="472d249e-e487-4e57-873c-17492fd5bce3")
            for eachCVE in results:
                severity = getattr(eachCVE, 'v2severity', None) or getattr(eachCVE, 'v31severity', None)
                score = getattr(eachCVE, 'v2score', None) or getattr(eachCVE, 'v31score', None)
                vector = getattr(eachCVE, 'v2vector', None) or getattr(eachCVE, 'v31vector', None)
                
                if severity is not None:
                    cve_result = {
                        "id": eachCVE.id,
                        "url": eachCVE.url,
                        "severity": severity,
                        "score": score,
                        "description": eachCVE.descriptions[0].value,
                        "vector": vector
                    }
                    cve_results.append(cve_result)

    # Save the results to a JSON file
    output_file = "cve_results_1.json"
    counter = 2
    while os.path.exists(output_file):
        output_file = f"cve_results_{counter}.json"
        counter += 1

    with open(output_file, "w") as f:
        json.dump(cve_results, f, indent=4)

    print(f"Results saved to {output_file}")
    
def main():
    parser = argparse.ArgumentParser(description='Run security tools with specified parameters.')
    parser.add_argument("-list-containers", action="store_true", help="List running containers")
    parser.add_argument("-apache-version", help="Version of the Apache service running docker container")
    parser.add_argument("-mysql-version", help="Version of the MySQL service running docker container")
    parser.add_argument("-wordpress-version", help="Version of the WordPress service running docker container")
    parser.add_argument('-phpmyadmin-version', help='Version of the phpMyAdmin service running docker container')
    parser.add_argument('-wpscan-run', action='store_true', help='Run WPScan with predefined settings')
    parser.add_argument('-wpscan-url', type=str, help='URL to scan with WpScan')
    parser.add_argument('-vul-services', action="store_true", help='get the vulnerabilities of the service')
    parser.add_argument('-dirsearch-run', action='store_true', help='The URL to scan with dirsearch')
    parser.add_argument('-dirsearch-url', type=str, help='The URL to scan with dirsearch')


    args = parser.parse_args()

    if args.list_containers:
        list_running_containers()

    if args.apache_version:
        get_apache_version(args.apache_version)

    if args.mysql_version:
        get_mysql_version(args.mysql_version)

    if args.wordpress_version:
        get_wp_version(args.wordpress_version)
    
    if args.phpmyadmin_version:
        get_phpmyadmin_version(args.phpmyadmin_version)
        
    
    if args.wpscan_run:
        if not args.wpscan_url:
            print("URL is required for WpScan.")
            return
        run_wpscan(url=args.wpscan_url)

    if args.dirsearch_run:
        if not args.dirsearch_url:
            print("URL is required for DirSearch.")
            return
        run_dirsearch(url=args.dirsearch_url)

    if args.vul_services:
        get_vulnerabilities()

    # if args.run_dirbuster:
    #     if not args.dirbuster_url:
    #         print("URL is required for DirBuster.")
    #         return
    #     run_dirbuster(url=args.dirbuster_url)
   # Call the function to get the running containers using the specified Docker command
   
if __name__ == "__main__":
    main()
